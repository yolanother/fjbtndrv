#!/bin/bash

Title="Fujitsu Siemens Tablet Buttons Driver"
Version="0.90"

EXEC=${DEBUG:+echo}

#IMODE=
CSIZE="`stty size`"
DIALOG_BIN="`type -p dialog`"
WHIPTAIL_BIN="`type -p whiptail`"


config_regex='[[:space:]]*$name[[:space:]]*=[[:space:]]*'
from_config()
{
        local file=${0%/*}/config.mk
        local name="$1"

        [ -r "$file" ] && eval 'sed "s|^'$config_regex'||p; d" "$file"'
}

to_config()
{
        local file=${0%/*}/config.mk
        local name="$1" value="$2"

        if [ -r "$file" ] && eval 'grep -q "^'$config_regex'" "$file"'; then
          eval 'sed -i "s|^\('$config_regex'\).*|\1$value|" "$file"'
        else
          echo "$name = $value" >>"$file"
        fi
}

push()
{
  local name="$1" s=
  shift
  for s in "$@"; do
    s="${s//"/\\"}"
    eval "$name[\${#$name[@]}]=\"$s\""
  done
}

dialog()
{
  local title="$1"; shift

  $EXEC $DIALOG_BIN --stdout \
    --title " $title " --backtitle "$Title $Version" \
    "$@"
}

_wt_tty=`tty`
whiptail()
{
  local title="$1"; shift

  $EXEC $WHIPTAIL_BIN \
    --title "$title" --backtitle "$Title $Version" \
    "$@" 2>&1 >$_wt_tty
}


dcol=$(( ${CSIZE#* } - 12 ))
[ "$dcol" -a "$dcol" -gt 28 ] || dcol=0
drow=$(( ${CSIZE% *} - 8 ))
[ "$drow" -a "$drow" -gt  6 ] || drow=0

menu()
{
  local title="$1"
  local default=$2
  shift 2

  case "$IMODE" in
  dialog|whiptail)
    local list=()
    for e in `seq 1 $#`; do
      push list $e "$1"
      shift
    done

    $IMODE "$title" --default-item $default --menu " " 0 0 0 "${list[@]}"
    [ $? -eq 0 ] || echo 0
    ;;
  console)
    local key=
    [ "$title" ] && echo "   [$title]" >&2
    while [ -z "$key" ]; do
      local i=1
      while [ $i -le $# ]; do
        eval echo "$i. \${$i}" >&2
        i=$[$i+1]
      done
      echo "0. Exit" >&2
      echo -n ": " >&2
      read -n1 key
      echo >&2
      case "$key" in
        [0-9]) [ $key -le $# ] || key=;;
        *)     key=;;
      esac
    done

    echo "$key"
    ;;
  *)
    exit 1
    ;;
  esac
}

info()
{
  case "$IMODE" in
  dialog|whiptail)
    local msg=$( for s in "$@"; do echo "$s"; done )
    $IMODE "INFO" --msgbox "$msg" 0 0
    ;;
  console)
    local s=
    echo >&2
    for s in "$@"; do
      echo "$s" >&2
    done
    echo >&2
    read -n1
    ;;
  esac
}

show()
{
  case "$IMODE" in
  dialog)
    $IMODE "$1" --textbox "$1" $drow $dcol
    ;;
  whiptail)
    $IMODE "$1" --textbox "$1" $drow $dcol --scrolltext
    ;;
  console)
    echo "*** $1 ***" >&2
    cat  "$1" >&2
    echo >&2
    read -n1 
    ;;
  esac
}

error()
{
  sleep 1

  case "$IMODE" in
  dialog)
    local msg=$(
      echo "\Z1ERROR: $1\Z0";
      shift
      for s in "$@"; do echo "$s"; done
    )
    $IMODE "ERROR" --colors --msgbox "$msg" 0 0
    ;;
  whiptail|console)
    local msg=()
    push msg "ERROR: $1"
    while [ "$2" ]; do
      shift
      push msg "       $1"
    done
    info "${msg[@]}"
    ;;
  esac
  exit 1
}

input()
{
  case "$IMODE" in
  dialog|whiptail)
    $IMODE --inputbox "$1" 0 0 "$2"
    ;;
  console)
    local in=
    echo "$1 [$2]" >&2
    read in
    [ "$in" ] && echo "$in" || echo "$2"
    ;;
  esac
}

gauge()
{
  case "$IMODE" in
  dialog|whiptail)
    local cols=${CSIZE#* }
    $IMODE "progressing" --gauge "..." 0 $[ ${cols:-0} * 9 / 10 ] 0
    ;;
  console)
    local in=
    echo
    while read inp; do
      case "$inp" in
      ERROR)
        exit 1
        ;;
      [0-9]|[0-9][0-9])
        ;;
      100)
        echo "done"
        ;;
      *)
        echo "$inp..."
        ;;
      esac
    done
    echo
    ;;
  esac
}

gauge_update()
{
  case "$IMODE" in
  dialog|whiptail)
    [ "$2" ] && echo -e "XXX\n$1\n$2\nXXX\n$1" || echo "$1"
    ;;
  console)
    [ "$2" ] && echo "$2"
    echo "$1"
    ;;
  esac
}

toggle()
{
  [ "$1" = "y" ] && echo "n" || echo "y"
}

endis()
{
  [ "$1" = "y" ] && echo "enabled" || echo "disabled"
}



[ "$IMODE" ] || IMODE=${DIALOG_BIN:+dialog}
[ "$IMODE" ] || IMODE=${WHIPTAIL_BIN:+whiptail}
[ "$IMODE" ] || IMODE="console"

prefix="`from_config PREFIX`"
wacom="`from_config WACOM`"
osd="`from_config XOSD`"

prefix="${prefix:-/usr/local}"
wacom="${wacom:-y}"
osd="${osd:-y}"

install=n
ret=1
err=0
while true; do
  ret=$( menu "Main" $ret \
    "Wacom TabletPC support `endis $wacom`" \
    "On-Screen display `endis $osd`" \
    "Install fscd in $prefix/bin" \
    "Save & Exit" \
    "Save, Build & Install" )

  case "$ret" in
    1)   wacom=`toggle "$wacom"`;;
    2)     osd=`toggle "$osd"`;;
    3)  prefix=`input  "Installation prefix (without /bin):" "$prefix"`;;
    4) install=n; break;;
    5) install=y; break;;
    0) exit 1;;
  esac
done

to_config "PREFIX" "$prefix"
to_config "WACOM" "$wacom"
to_config "XOSD" "$osd"

if [ "$install" = "y" ]; then
  if [ "$UID" != "0" ]; then
    if ! ( type -p sudo && sudo -S /bin/true ) </dev/null &>/dev/null; then
      install=n
      info "Need root permissions to run installation." \
           "Please rerun ${0##*/} with root permissions" \
           "or start \`make install' manually."
    fi
  fi

  set -o pipefail
  (
    > make.log

    gauge_update 0 cleanup
    if ! make clean >> make.log 2>&1; then
      gauge_update 0 ERROR
      error "Cleaning the source failed!" \
            "See make.log for more details."
    fi

    gauge_update 33 building
    if ! make fsc_btns.ko >> make.log 2>&1; then
      gauge_update 0 ERROR
      error "Building the kernel module failed." \
            "See make.log for more details."
    fi
    gauge_update 49
    if ! make fscd >> make.log 2>&1; then
      gauge_update 0 ERROR
      error "Building the userspace daemon failed." \
            "See make.log for more details."
    fi

    if [ "$install" = "y" ]; then
      gauge_update 66 installing
      if ! sudo make install </dev/null >> make.log 2>&1; then
        gauge_update 0 ERROR
        error "Installation failed" \
              "See make.log for more details."
      fi
    else
      gauge_update 66 "installation skipped"
    fi

    gauge_update 100
    sleep 1
  ) | gauge
  err=$?

  if [ "$err" = 0 ]; then
    if [ "$install" = "y" ]; then
      info "Installation completed successfully." "" \
           "Now you can load the kernel module with \`modprobe fsc_btns' and then start the daemon with \`$prefix/bin/fscd'."
    else
      info "Building complete successfully." "" \
           "Now you can load the kernel module with \`insmod ./fsc_btns.ko' and then start the daemon with \`./fscd'."
    fi
  else
    show make.log
  fi
fi

exit $err
# vim: tabstop=2 softtabstop=2 expandtab autoindent
