AC_INIT(fscd, svn, [http://fjbtndrv.sourceforge.net])
AC_PREREQ([2.57])
AM_INIT_AUTOMAKE([gnu 1.9])

AM_CONFIG_HEADER(config.h)

AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_CPP
AC_GNU_SOURCE
AC_PROG_INSTALL

AC_HEADER_STDC

AM_ICONV
AM_GNU_GETTEXT([external])
AM_GNU_GETTEXT_VERSION([0.16.1])

PKG_CHECK_MODULES(X11, [x11 xi xext xtst xrandr])
AC_SUBST(X11_CFLAGS)
AC_SUBST(X11_LIBS)

PKG_CHECK_MODULES(HAL, [hal >= 0.5.8])
AC_SUBST(HAL_CFLAGS)
AC_SUBST(HAL_LIBS)

AC_ARG_ENABLE([dynamic],
  AS_HELP_STRING([--enable-dynamic],
    [Enable dynamic library loading (Default: no)]),
  [enable_dynamic=$enableval], [enable_dynamic=no])
if test x$enable_dynamic = xyes; then
  AC_DEFINE(ENABLE_DYNAMIC, [], [dynamic library loading])
fi

AC_ARG_ENABLE([wacom],
  AS_HELP_STRING([--disable-wacom],
    [Disable WACOM support (Default: auto)]),
  [enable_wacom=$enableval], [enable_wacom=auto])
if test x$enable_wacom != xno; then
  AC_CHECK_LIB([wacomcfg], [WacomConfigInit], [has_wacom=yes], [has_wacom=no])
  if test x$enable_wacom = xyes -a x$has_wacom != xyes; then
    AC_MSG_ERROR([wacom library not found])
  fi
  enable_wacom=$has_wacom
fi
if test x$enable_wacom = xyes; then
  AC_DEFINE(ENABLE_WACOM, [], [enable wacom support])
  AC_SUBST(LIBWACOMCFG_CFLAGS)
  LIBWACOMCFG_CFLAGS=
  AC_SUBST(LIBWACOMCFG_LIBS)
  if test x$enable_dynamic != xyes; then
    LIBWACOMCFG_LIBS=-lwacomcfg
  fi
  if test x$enable_dynamic = xyes; then
    enable_wacom=dynamic
  fi
fi

AC_ARG_ENABLE([xosd],
  AS_HELP_STRING([--disable-xosd],
    [Disable OSD support (Default: auto)]),
  [enable_xosd=$enableval], [enable_xosd=auto])
if test x$enable_xosd != xno; then
  AM_PATH_LIBXOSD([has_xosd=yes], [has_xosd=no])
  if test x$enable_xosd = xyes -a x$has_xosd != xyes; then
    AC_MSG_ERROR([xosd library not found])
  fi
  enable_xosd=$has_xosd
fi
if test x$enable_xosd = xyes; then
  AC_DEFINE(ENABLE_XOSD, [], [enable osd support])
fi

AC_ARG_ENABLE([debug],
  AS_HELP_STRING([--enable-debug],
    [Enable debug output (Default: disabled)]),
  [enable_debug=$enableval], [enable_debug=no])
if test x$enable_debug = xyes; then
  AC_DEFINE(DEBUG, [], [debug output])
fi

AC_ARG_ENABLE([kernel-mod],
  AS_HELP_STRING([--disable-kernel-mod],
    [Disable key modification by kernel module (Default: enabled)]),
  [enable_kernel_mod=$enableval], [enable_kernel_mod=yes])
if test x$enable_kernel_mod = xyes; then
  AC_DEFINE(CONFIG_HANDLE_MOD, [], [enable kernel key modification])
fi

if test x$enable_kernel_mod = xyes; then
  AC_ARG_ENABLE([longer-press-mod],
    AS_HELP_STRING([--enable-longer-press-mod],
      [Enable potentially annoying longer-press features (Default: disabled)]),
    [enable_longer_press_mod=$enableval], [enable_longer_press_mod=no])
  if test x$enable_longer_press_mod = xyes; then
    AC_DEFINE(CONFIG_LONGER_PRESS_MOD, [], [enable longer-press keycode modification])
  fi
fi

AC_ARG_WITH(script-dir,
  AS_HELP_STRING([--with-script-dir=dir],
                 [location of the helper scripts (Default: LIBDIR/fscd)]),
  scriptdir="$withval",
  scriptdir="${libdir}/fscd")
AC_SUBST(scriptdir)

AC_ARG_WITH(repeat-rate,
  AS_HELP_STRING([--with-repeat-rate=rate],
                 [repeat rate for autorepeat (Default: 16)]),
  repeat_rate=$withval,
  repeat_rate=16)
if test x$repeat_rate != xno; then
  AC_DEFINE_UNQUOTED(REPEAT_RATE, [$repeat_rate], [autorepeat rate])
fi

AC_ARG_WITH(repeat-delay,
  AS_HELP_STRING([--with-repeat-delay=msec],
                 [delay befor autorepeat (Default: 700)]),
  repeat_delay=$withval,
  repeat_delay=700)
if test x$repeat_rate != xno; then
  if test x$repeat_delay = xno; then
    repeat_delay=0
  fi
  AC_DEFINE_UNQUOTED(REPEAT_DELAY, [$repeat_delay], [autorepeat delay])
fi

AC_ARG_WITH(sticky-timeout,
  AS_HELP_STRING([--with-sticky-timeout=msec],
                 [timeout for sticky modification keys (Default: 1400)]),
  sticky_timeout=$withval,
  sticky_timeout=1400)
if test x$sticky_timeout != xno; then
  AC_DEFINE_UNQUOTED(STICKY_TIMEOUT, [$sticky_timeout], [sticky timeout])
fi

AM_CONDITIONAL(HAVE_FUJITSU_LAPTOP_MODULE, [modinfo fujitsu-laptop &>/dev/null])

AC_CONFIG_FILES([
  Makefile
  src/Makefile
  po/Makefile.in
  contrib/Makefile
])

AC_OUTPUT

echo "

  F S C D

  Copyright (C) 2006-2007  Robert Gerlach

  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 2 of the License, or
  (at your option) any later version.

  See file COPYING for more details.


        prefix:         ${prefix}
        debug:          ${enable_debug}
        wacom support:  ${enable_wacom}
        osd support:    ${enable_xosd}

        autorepeat:     ${repeat_rate} chars/s after a ${repeat_delay}ms delay
        sticky keys:    ${sticky_timeout}ms
        longer press:   ${enable_longer_press_mod}

  Type 'make' to build and then 'sudo make install' to install fscd.
"
