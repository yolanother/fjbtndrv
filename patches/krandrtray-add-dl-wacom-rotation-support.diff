--- kdebase/kcontrol/randr/randr.cpp	2007-01-15 12:31:49.000000000 +0100
+++ kdebase/kcontrol/randr/randr.cpp	2007-10-18 03:40:25.000000000 +0200
@@ -39,6 +39,37 @@
 #undef INT32
 #include <X11/extensions/Xrandr.h>
 
+
+extern "C" {
+#include <dlfcn.h>
+
+typedef void WACOMCONFIG, WACOMDEVICE;
+
+#define XWACOM_PARAM_ROTATE             10
+#define XWACOM_VALUE_ROTATE_NONE	 0
+#define XWACOM_VALUE_ROTATE_CW		 1
+#define XWACOM_VALUE_ROTATE_CCW		 2
+#define XWACOM_VALUE_ROTATE_HALF	 3
+
+static void *wacomLibHandle;
+static WACOMCONFIG *wacomConfig;
+
+typedef WACOMCONFIG * (*__WacomConfigInit)(Display*, WACOMCONFIG*);
+__WacomConfigInit WacomConfigInit;
+
+typedef WACOMDEVICE * (*__WacomConfigOpenDevice)(WACOMCONFIG*, const char*);
+__WacomConfigOpenDevice WacomConfigOpenDevice;
+
+typedef int (*__WacomConfigCloseDevice)(WACOMDEVICE*);
+__WacomConfigCloseDevice WacomConfigCloseDevice;
+
+typedef int (*__WacomConfigSetRawParam)(WACOMDEVICE*, int, int, unsigned*);
+__WacomConfigSetRawParam WacomConfigSetRawParam;
+
+typedef void (*__WacomConfigFree)(WACOMCONFIG*);
+__WacomConfigFree WacomConfigFree;
+}
+
 class RandRScreenPrivate
 {
 public:
@@ -59,10 +90,26 @@
 {
 	loadSettings();
 	setOriginal();
+
+	if((wacomLibHandle = dlopen("libwacomcfg.so", RTLD_NOW))) {
+		WacomConfigInit = (__WacomConfigInit) dlsym(wacomLibHandle, "WacomConfigInit");
+		WacomConfigOpenDevice = (__WacomConfigOpenDevice) dlsym(wacomLibHandle, "WacomConfigOpenDevice");
+		WacomConfigCloseDevice = (__WacomConfigCloseDevice) dlsym(wacomLibHandle, "WacomConfigCloseDevice");
+		WacomConfigSetRawParam = (__WacomConfigSetRawParam) dlsym(wacomLibHandle, "WacomConfigSetRawParam");
+		WacomConfigFree = (__WacomConfigFree) dlsym(wacomLibHandle, "WacomConfigFree");
+
+		if(WacomConfigInit)
+			wacomConfig = WacomConfigInit(qt_xdisplay(), NULL);
+	}
 }
 
 RandRScreen::~RandRScreen()
 {
+	if(wacomLibHandle) {
+		if(WacomConfigFree)
+			WacomConfigFree(wacomLibHandle);
+		dlclose(wacomLibHandle);
+	}
 	delete d;
 }
 
@@ -116,14 +163,36 @@
 
 	//kdDebug() << "New size: " << WidthOfScreen(ScreenOfDisplay(QPaintDevice::x11AppDisplay(), screen)) << ", " << HeightOfScreen(ScreenOfDisplay(QPaintDevice::x11AppDisplay(), screen)) << endl;
 
-	if (status == RRSetConfigSuccess) {
-		m_currentSize = m_proposedSize;
-		m_currentRotation = m_proposedRotation;
-		m_currentRefreshRate = m_proposedRefreshRate;
-		return true;
-	}
+	if (status != RRSetConfigSuccess)
+		return false;
 
-	return false;
+	m_currentSize = m_proposedSize;
+	m_currentRotation = m_proposedRotation;
+	m_currentRefreshRate = m_proposedRefreshRate;
+
+	if(wacomLibHandle && wacomConfig) {
+		switch (m_proposedRotation) {
+			case RR_Rotate_90:
+				m_proposedRotation = XWACOM_VALUE_ROTATE_CW;
+				break;
+			case RR_Rotate_180:
+				m_proposedRotation = XWACOM_VALUE_ROTATE_HALF;
+				break;
+			case RR_Rotate_270:
+				m_proposedRotation = XWACOM_VALUE_ROTATE_CCW;
+				break;
+			default:
+				m_proposedRotation = XWACOM_VALUE_ROTATE_NONE;
+		}
+
+		WACOMDEVICE *dev = WacomConfigOpenDevice(wacomConfig, "stylus");
+		if(dev) {
+			WacomConfigSetRawParam(dev, XWACOM_PARAM_ROTATE, m_proposedRotation, CurrentTime);
+			WacomConfigCloseDevice(dev);
+		}
+	}
+ 
+	return true;
 }
 
 bool RandRScreen::applyProposedAndConfirm()
